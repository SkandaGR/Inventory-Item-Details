CREATE TABLE TBL_INVOICE_DETAILS
(
IND_ID SERIAL PRIMARY KEY,
IND_NAME VARCHAR(100) NOT NULL
)
;
INSERT INTO TBL_INVOICE_DETAILS (IND_NAME) VALUES ('Shop Bridge Invoice');

CREATE TABLE TBL_UNIT_MEASURE_TYPES
(
UMT_ID SERIAL PRIMARY KEY,
UMT_NAME VARCHAR(100) NOT NULL
)
;


INSERT INTO TBL_UNIT_MEASURE_TYPES (UMT_NAME) VALUES ('Set');
INSERT INTO TBL_UNIT_MEASURE_TYPES (UMT_NAME) VALUES ('Grams-gms');
INSERT INTO TBL_UNIT_MEASURE_TYPES (UMT_NAME) VALUES ('Metric Ton-MT');
INSERT INTO TBL_UNIT_MEASURE_TYPES (UMT_NAME) VALUES ('Mili Liter-ML');
INSERT INTO TBL_UNIT_MEASURE_TYPES (UMT_NAME) VALUES ('Centi Meter-cm');


CREATE OR REPLACE FUNCTION "public"."sp_get_unit_dropdown_details"()
  RETURNS TABLE("id" int4, "value" varchar) AS $BODY$
BEGIN

RETURN QUERY SELECT * FROM TBL_UNIT_MEASURE_TYPES;
 

END; $BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
;

CREATE OR REPLACE FUNCTION "public"."fetch_inventory_details"(OUT "invetory_id" int4, OUT "invetory_name" text)
  RETURNS "pg_catalog"."record" AS $BODY$

BEGIN

SELECT * INTO INVETORY_ID , INVETORY_NAME FROM TBL_INVOICE_DETAILS;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  
; 


CREATE TABLE TBL_INVOICE_ITEM_DETAILS
(
IID_ID SERIAL PRIMARY KEY,
IID_IND_ID INT4 NOT NULL,
IID_ITEM_CODE VARCHAR(100) NOT NULL,
IID_ITEM_NAME VARCHAR(100) NOT NULL,
IID_ITEM_DESC VARCHAR(100) NOT NULL,
IID_ITEM_PRICE INT4 NOT NULL,
IID_UMT_ID INT4 NOT NULL,
IID_NUM_UNITS NUMERIC(10,2) NOT NULL,
IID_CREATED_BY INT4 NOT NULL,
CONSTRAINT FK_IND_ID
FOREIGN KEY(IID_IND_ID) 
REFERENCES TBL_INVOICE_DETAILS(IND_ID),
CONSTRAINT FK_UMT_ID
FOREIGN KEY(IID_UMT_ID) 
REFERENCES TBL_UNIT_MEASURE_TYPES(UMT_ID)
)
;


CREATE OR REPLACE FUNCTION "public"."insert_item_details"(IN "pkid" int4, IN "t_iid_ind_id" int4, IN "t_iid_item_code" text, IN "t_iid_item_name" text, IN "t_iid_item_desc" text, IN "t_iid_item_price" int4, IN "t_iid_umt_id" int4, IN "t_iid_num_units" numeric, IN "t_iid_created_by" int4, OUT "status" text)
  RETURNS "pg_catalog"."text" AS $BODY$

BEGIN

IF PKID = 0 THEN 


INSERT INTO TBL_INVOICE_ITEM_DETAILS (IID_IND_ID,IID_ITEM_CODE,IID_ITEM_NAME,IID_ITEM_DESC,IID_ITEM_PRICE,IID_UMT_ID,IID_NUM_UNITS,IID_CREATED_BY) VALUES (T_IID_IND_ID,T_IID_ITEM_CODE,T_IID_ITEM_NAME,T_IID_ITEM_DESC,T_IID_ITEM_PRICE,T_IID_UMT_ID,T_IID_NUM_UNITS,T_IID_CREATED_BY);

STATUS := 'Saved Successfully!';

ELSE

UPDATE TBL_INVOICE_ITEM_DETAILS SET IID_ITEM_CODE = T_IID_ITEM_CODE ,IID_ITEM_NAME = T_IID_ITEM_NAME ,IID_ITEM_DESC = T_IID_ITEM_DESC ,IID_ITEM_PRICE = T_IID_ITEM_PRICE,IID_UMT_ID = T_IID_UMT_ID,IID_NUM_UNITS = T_IID_NUM_UNITS WHERE IID_ID = PKID;

STATUS := 'Updated Successfully!';

END IF;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100

;  


CREATE OR REPLACE FUNCTION "public"."fetch_inventory_item_details"("pkid" int4)
  RETURNS TABLE("t_ind_id" int4, "t_iid_ind_id" int4, "t_ind_name" varchar, "t_iid_item_code" varchar, "t_iid_item_name" varchar, "t_iid_item_desc" varchar, "t_iid_item_price" int4, "t_iid_umt_id" int4, "t_umt_name" varchar, "t_iid_num_units" numeric) AS $BODY$

BEGIN

IF PKID = 0 THEN

RETURN QUERY 

SELECT IID_ID , IID_IND_ID , IND_NAME , IID_ITEM_CODE , IID_ITEM_NAME , IID_ITEM_DESC , IID_ITEM_PRICE , IID_UMT_ID ,  UMT_NAME ,IID_NUM_UNITS  FROM TBL_INVOICE_ITEM_DETAILS , TBL_INVOICE_DETAILS , TBL_UNIT_MEASURE_TYPES WHERE IID_IND_ID = IND_ID AND UMT_ID = IID_UMT_ID;

ELSE

RETURN QUERY 

SELECT IID_ID , IID_IND_ID , IND_NAME , IID_ITEM_CODE , IID_ITEM_NAME , IID_ITEM_DESC , IID_ITEM_PRICE , IID_UMT_ID ,  UMT_NAME ,IID_NUM_UNITS  FROM TBL_INVOICE_ITEM_DETAILS , TBL_INVOICE_DETAILS , TBL_UNIT_MEASURE_TYPES WHERE IID_IND_ID = IND_ID AND UMT_ID = IID_UMT_ID AND IID_ID = PKID;

END IF;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000
  
;
  
 